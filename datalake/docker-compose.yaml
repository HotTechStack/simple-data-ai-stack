services:
  # PostgreSQL - Based on working NocoDB setup
  postgres:
    image: postgres:16.6
    container_name: postgres-main
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-root_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-root_db}"]
      interval: 10s
      timeout: 2s
      retries: 10
    networks:
      - postgres_network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - postgres_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --no-auth-warning -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 3

  # NocoDB - Using their exact working configuration
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NC_DB: "pg://postgres:5432?u=${POSTGRES_USER:-postgres}&p=${POSTGRES_PASSWORD}&d=${POSTGRES_DB:-root_db}"
      NC_REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379/0"
      NC_DISABLE_TELE: "true"
      NC_PUBLIC_URL: "http://localhost:8080"
    ports:
      - "8080:8080"
    volumes:
      - nocodb_data:/usr/app/data
    networks:
      - postgres_network

  # pgAdmin 4
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres_network

  # PgBouncer - Connection pooling
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    restart: always
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB:-root_db}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 25
    ports:
      - "127.0.0.1:6432:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres_network

  # Backup solution
  pgbackweb:
    image: eduardolat/pgbackweb:latest
    container_name: pgbackweb
    restart: always
    environment:
      PBW_ENCRYPTION_KEY: ${PBW_ENCRYPTION_KEY}
      PBW_POSTGRES_CONN_STRING: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-root_db}?sslmode=disable"
    volumes:
      - ./backups:/backups
      - pgbackweb_data:/data
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postgres_network

  # Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: always
    volumes:
      - uptime_kuma_data:/app/data
    ports:
      - "3001:3001"
    networks:
      - postgres_network

volumes:
  postgres_data: {}
  pgadmin_data: {}
  uptime_kuma_data: {}
  pgbackweb_data: {}
  redis_data: {}
  nocodb_data: {}

networks:
  postgres_network:
    driver: bridge