version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: redis-streaming
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: postgres-streaming
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: streaming
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: streaming_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streaming_user -d streaming"]
      interval: 5s
      timeout: 3s
      retries: 5

  streaming-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streaming-app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: streaming
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: streaming_pass
      STREAM_NAME: events
      CONSUMER_GROUP: processors
      CONSUMER_NAME: consumer-1
      NUM_WORKERS: 5
      BATCH_SIZE: 500
      BATCH_TIMEOUT_SECONDS: 2
      XREAD_COUNT: 100
      XREAD_BLOCK_MS: 5000
      DLQ_STREAM_NAME: events:dead
    volumes:
      - ./src:/app/src
    command: uv run python -m src.main

volumes:
  redis_data:
  postgres_data:
